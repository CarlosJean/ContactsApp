// <auto-generated />
using ContactsApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ContactsApp.Migrations
{
    [DbContext(typeof(ContactsAppDbContext))]
    [Migration("20210601225427_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ContactsApp.Entities.Contact", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GroupID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("GroupID");

                    b.ToTable("Contacts");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Email = "holguinjean1@gmail.com",
                            GroupID = 1,
                            Name = "Jean Carlos Holguin Berihuete"
                        },
                        new
                        {
                            ID = 2,
                            Email = "jhanssel@gmail.com",
                            GroupID = 1,
                            Name = "Jhanssel Holguin Berihuete"
                        });
                });

            modelBuilder.Entity("ContactsApp.Entities.ContactContactType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContactID")
                        .HasColumnType("int");

                    b.Property<int>("ContactTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ContactID");

                    b.HasIndex("ContactTypeID");

                    b.ToTable("ContactContactTypes");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ContactID = 1,
                            ContactTypeID = 1,
                            Number = "8098854086"
                        },
                        new
                        {
                            ID = 2,
                            ContactID = 1,
                            ContactTypeID = 2,
                            Number = "8098854085"
                        },
                        new
                        {
                            ID = 3,
                            ContactID = 2,
                            ContactTypeID = 1,
                            Number = "8098854186"
                        },
                        new
                        {
                            ID = 4,
                            ContactID = 2,
                            ContactTypeID = 2,
                            Number = "8098854185"
                        });
                });

            modelBuilder.Entity("ContactsApp.Entities.ContactType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("ContactTypes");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Móvil"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Trabajo"
                        });
                });

            modelBuilder.Entity("ContactsApp.Entities.Group", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Familia"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Amigos"
                        });
                });

            modelBuilder.Entity("ContactsApp.Entities.Contact", b =>
                {
                    b.HasOne("ContactsApp.Entities.Group", "Group")
                        .WithMany("Contacts")
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("ContactsApp.Entities.ContactContactType", b =>
                {
                    b.HasOne("ContactsApp.Entities.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContactsApp.Entities.ContactType", "ContactType")
                        .WithMany()
                        .HasForeignKey("ContactTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("ContactType");
                });

            modelBuilder.Entity("ContactsApp.Entities.Group", b =>
                {
                    b.Navigation("Contacts");
                });
#pragma warning restore 612, 618
        }
    }
}
